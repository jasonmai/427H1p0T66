#install.packages("regpro")
library("regpro")
library(MASS)
#install.packages("forecast")
library("forecast")
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
import_data(global_tables, c('BNS', 'BMO', 'AC'))
test_results <- test_HMMM(global_tables, c('BMO'), 30, 3)
global_tables$tradesbook
global_tables$positionbook
temp_ind_2 <- !is.na(global_tables$tradesbook[["PnL"]])
pnl_pertrade <- global_tables$tradesbook[["PnL"]][temp_ind_2]
eod_vals <- data.matrix(test_results[["eod_results"]][["eod_value"]])
mu <- data.matrix(test_results[["mu"]])
A <- data.matrix(test_results[["A"]])
cov_matrix <- data.matrix(test_results[["cov_matrix"]])
accuracy <- data.matrix(test_results[["accuracy"]])
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPX_ask)
source('strategy_hmm.r')
test_results <- test_HMMM(global_tables, c('BMO'), 30, 3)
#result<-sum(comparison[!is.na(comparison)]) / (nrow(comparison) * ncol(comparison))
temp_ind_2 <- !is.na(global_tables$tradesbook[["PnL"]])
pnl_pertrade <- global_tables$tradesbook[["PnL"]][temp_ind_2]
eod_vals <- data.matrix(test_results[["eod_results"]][["eod_value"]])
mu <- data.matrix(test_results[["mu"]])
A <- data.matrix(test_results[["A"]])
cov_matrix <- data.matrix(test_results[["cov_matrix"]])
accuracy <- data.matrix(test_results[["accuracy"]])
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPX_ask)
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPX_ask)
source('new metrics file.R')
b
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPX_ask)
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
test_results <- test_HMMM(global_tables, c('BMO'), 30, 3)
#result<-sum(comparison[!is.na(comparison)]) / (nrow(comparison) * ncol(comparison))
temp_ind_2 <- !is.na(global_tables$tradesbook[["PnL"]])
pnl_pertrade <- global_tables$tradesbook[["PnL"]][temp_ind_2]
eod_vals <- data.matrix(test_results[["eod_results"]][["eod_value"]])
mu <- data.matrix(test_results[["mu"]])
A <- data.matrix(test_results[["A"]])
cov_matrix <- data.matrix(test_results[["cov_matrix"]])
accuracy <- data.matrix(test_results[["accuracy"]])
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPX_ask)
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPX_ask)
i
curr_market_price
market_init_price
i
curr_market_price
time_list[2701, ]
head(Pnl_df)
Pnl_df[2701,]
Pnl_df[2700,]
Pnl_df[2699,]
start_time_date
head(positionbook)
positionbook[2700,]
positionbook[2699,]
dim(positionbook)
marketdata$Date
source('new metrics file.R')
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPX_ask)
rm(list = ls())
setwd("~/quantathon/427H1p0T66/Yu")
source('yu_lib.r')
library('numDeriv')
data <- read.table("../in_sample_data.txt", sep=",")
so_indices <- 1 + 6 * 0:99 + 1
sh_indices <- 1 + 6 * 0:99 + 2
sl_indices <- 1 + 6 * 0:99 + 3
sc_indices <- 1 + 6 * 0:99 + 4
tvl_indices <- 1 + 6 * 0:99 + 5
ind_indices <- 1 + 6 * 0:99 + 6
so_mat <- data.matrix(data[,so_indices])
sh_mat <- data.matrix(data[,sh_indices])
sl_mat <- data.matrix(data[,sl_indices])
sc_mat <- data.matrix(data[,sc_indices])
tvl_mat <- data.matrix(data[,tvl_indices])
ind_mat <- data.matrix(data[,ind_indices])
N = 100
num_days <- nrow(sc_mat)
rco <- so_mat[2:num_days,] / sc_mat[1:(num_days - 1),] - 1
roc <- sc_mat[1:num_days,] / so_mat[1:num_days,] - 1
roo <- so_mat[2:num_days,] / so_mat[1:(num_days - 1),] - 1
rcc <- sc_mat[2:num_days,] / sc_mat[1:(num_days - 1),] - 1
rvp <- (1 / (4 * log(2))) * (log(sh_mat) - log(sl_mat))^2
avrRCO <- rowMeans(rco)
avrROC <- rowMeans(roc)
avrROO <- rowMeans(roo)
avrRCC <- rowMeans(rcc)
avrTVL <- matrix(0, nrow = num_days - 1, ncol = N)
avrRVP <- matrix(0, nrow = num_days - 1, ncol = N)
for (t in 1: (num_days - 1)){
if (t > 200){
avrTVL[t,] <- colMeans(tvl_mat[(t - 199):t,])
avrRVP[t,] <- colMeans(rvp[(t - 199):t,])
}
else{
if (t == 1){
avrTVL[1,] <- tvl_mat[1,]
avrRVP[1,] <- rvp[1,]
}
else{
avrTVL[t,] <- colMeans(tvl_mat[1:t,])
avrRVP[t,] <- colMeans(rvp[1:t,])
}
}
}
test <- matrix(avrRCC[1:(num_days - 2)], nrow = num_days - 2,ncol = 100)
Q1 <- (rcc[1:(num_days - 2),] - test) / N
test <- matrix(avrROO[2:(num_days - 1)], nrow = num_days - 2,ncol = 100)
Q2 <- (roo[2:(num_days - 1),] - test) / N
test <- matrix(avrROC[2:(num_days - 1)], nrow = num_days - 2,ncol = 100)
Q3 <- (roc[2:(num_days - 1),] - test) / N
test <- matrix(avrRCO[2:(num_days - 1)], nrow = num_days - 2,ncol = 100)
Q4 <- (rco[2:(num_days - 1),] - test) / N
Q5 <- Q1 * tvl_mat[2:(num_days - 1),] / avrTVL[2:(num_days - 1),]
Q6 <- Q2 * tvl_mat[2:(num_days - 1),] / avrTVL[2:(num_days - 1),]
Q7 <- Q3 * tvl_mat[2:(num_days - 1),] / avrTVL[2:(num_days - 1),]
Q8 <- Q4 * tvl_mat[2:(num_days - 1),] / avrTVL[2:(num_days - 1),]
Q9 <- Q1 * rvp[2:(num_days - 1),] / avrRVP[2:(num_days - 1),]
Q10 <- Q2 * rvp[2:(num_days - 1),] / avrRVP[2:(num_days - 1),]
Q11 <- Q3 * rvp[2:(num_days - 1),] / avrRVP[2:(num_days - 1),]
Q12 <- Q4 * rvp[2:(num_days - 1),] / avrRVP[2:(num_days - 1),]
system.time({a <- bee_Algorithm(600)})
sharpe_total <- mean(RP2)/sd(RP2)
W2 <- getW2(a)
RP2 <- rowSums(W2 * roc[3:(num_days),]) / rowSums(abs(W2))
sharpe <- mean(RP2[600:1001])/sd(RP2[600:1001])
#a <- stochastic_gradient_descent(1000, 300)
sharpe_total <- mean(RP2)/sd(RP2)
fill3 <- (W3 * ind_mat[3:num_days,]) >= 0
source('yu_lib.r')
system.time({a <- bee_Algorithm(600)})
source('yu_lib.r')
system.time({a <- bee_Algorithm(600)})
a <- stochastic_gradient_descent(a, 600, 300)
system.time({a <- bee_Algorithm(600)})
source('yu_lib.r')
system.time({a <- bee_Algorithm(600)})
a_n[1] <- a[1]
a_n <- rep(0, 12)
a_n[c(1, 3:5, 7:9, 11, 12)] <- a
a <- a_n
W2 <- getW2(a)
RP2 <- rowSums(W2 * roc[3:(num_days),]) / rowSums(abs(W2))
sharpe <- mean(RP2[600:1001])/sd(RP2[600:1001])
sharpe_total <- mean(RP2)/sd(RP2)
source('yu_lib.r')
system.time({a <- bee_Algorithm(600)})
a_n <- rep(0, 12)
a_n[c(1, 3:5, 7:9, 11, 12)] <- a
a <- a_n
W2 <- getW2(a)
RP2 <- rowSums(W2 * roc[3:(num_days),]) / rowSums(abs(W2))
sharpe <- mean(RP2[600:1001])/sd(RP2[600:1001])
sharpe_total <- mean(RP2)/sd(RP2)
system.time({a <- bee_Algorithm(600)})
source('yu_lib.r')
system.time({a <- bee_Algorithm(600)})
a_n <- rep(0, 12)
a_n[c(3:4, 7:8, 11:12)] <- a
W2 <- getW2(a)
RP2 <- rowSums(W2 * roc[3:(num_days),]) / rowSums(abs(W2))
a <- a_n
W2 <- getW2(a)
RP2 <- rowSums(W2 * roc[3:(num_days),]) / rowSums(abs(W2))
sharpe <- mean(RP2[600:1001])/sd(RP2[600:1001])
sharpe_total <- mean(RP2)/sd(RP2)
system.time({b <- bee_Algorithm(600)})
a
rm(list = ls())
source('yu_lib2.r')
data <- read.table("../in_sample_data.txt", sep=",")
so_indices <- 1 + 6 * 0:99 + 1
sh_indices <- 1 + 6 * 0:99 + 2
sl_indices <- 1 + 6 * 0:99 + 3
sc_indices <- 1 + 6 * 0:99 + 4
tvl_indices <- 1 + 6 * 0:99 + 5
ind_indices <- 1 + 6 * 0:99 + 6
so_mat <- data.matrix(data[,so_indices])
sh_mat <- data.matrix(data[,sh_indices])
sl_mat <- data.matrix(data[,sl_indices])
sc_mat <- data.matrix(data[,sc_indices])
tvl_mat <- data.matrix(data[,tvl_indices])
ind_mat <- data.matrix(data[,ind_indices])
N = 100
num_days <- nrow(sc_mat)
rco <- so_mat[2:num_days,] / sc_mat[1:(num_days - 1),] - 1
roc <- sc_mat[1:num_days,] / so_mat[1:num_days,] - 1
roo <- so_mat[2:num_days,] / so_mat[1:(num_days - 1),] - 1
rcc <- sc_mat[2:num_days,] / sc_mat[1:(num_days - 1),] - 1
rvp <- (1 / (4 * log(2))) * (log(sh_mat) - log(sl_mat))^2
avrRCO <- rowMeans(rco)
avrROC <- rowMeans(roc)
avrROO <- rowMeans(roo)
avrRCC <- rowMeans(rcc)
avrTVL <- matrix(0, nrow = num_days - 1, ncol = N)
avrRVP <- matrix(0, nrow = num_days - 1, ncol = N)
for (t in 1: (num_days - 1)){
if (t > 200){
avrTVL[t,] <- colMeans(tvl_mat[(t - 199):t,])
avrRVP[t,] <- colMeans(rvp[(t - 199):t,])
}
else{
if (t == 1){
avrTVL[1,] <- tvl_mat[1,]
avrRVP[1,] <- rvp[1,]
}
else{
avrTVL[t,] <- colMeans(tvl_mat[1:t,])
avrRVP[t,] <- colMeans(rvp[1:t,])
}
}
}
test <- matrix(avrRCC[1:(num_days - 2)], nrow = num_days - 2,ncol = 100)
Q1 <- (rcc[1:(num_days - 2),] - test) / N
test <- matrix(avrROO[2:(num_days - 1)], nrow = num_days - 2,ncol = 100)
Q2 <- (roo[2:(num_days - 1),] - test) / N
test <- matrix(avrROC[2:(num_days - 1)], nrow = num_days - 2,ncol = 100)
Q3 <- (roc[2:(num_days - 1),] - test) / N
test <- matrix(avrRCO[2:(num_days - 1)], nrow = num_days - 2,ncol = 100)
Q4 <- (rco[2:(num_days - 1),] - test) / N
Q5 <- Q1 * tvl_mat[2:(num_days - 1),] / avrTVL[2:(num_days - 1),]
Q6 <- Q2 * tvl_mat[2:(num_days - 1),] / avrTVL[2:(num_days - 1),]
Q7 <- Q3 * tvl_mat[2:(num_days - 1),] / avrTVL[2:(num_days - 1),]
Q8 <- Q4 * tvl_mat[2:(num_days - 1),] / avrTVL[2:(num_days - 1),]
Q9 <- Q1 * rvp[2:(num_days - 1),] / avrRVP[2:(num_days - 1),]
Q10 <- Q2 * rvp[2:(num_days - 1),] / avrRVP[2:(num_days - 1),]
Q11 <- Q3 * rvp[2:(num_days - 1),] / avrRVP[2:(num_days - 1),]
Q12 <- Q4 * rvp[2:(num_days - 1),] / avrRVP[2:(num_days - 1),]
system.time({b <- bee_Algorithm(600)})
b_n <- rep(0, 12)
b_n[c(3:4, 7:8, 11:12)] <- b
b <- b_n
W3 <- getW2(b)
fill3 <- (W3 * ind_mat[3:num_days,]) >= 0
RP3 <- rowSums(fill3 * W3 * roc[3:(num_days),]) / rowSums(abs(fill3 * W3))
RP3[is.nan(RP3)] = 0
sharpe <- mean(RP2[600:1001])/sd(RP2[600:1001])
sharpe <- mean(RP3[600:1001])/sd(RP3[600:1001])
sharpe_total <- mean(RP3)/sd(RP3)
b
system.time({b <- bee_Algorithm(1000)})
source('yu_lib2.r')
system.time({b <- bee_Algorithm(1000)})
b_n <- rep(0, 12)
b_n[c(3:4, 7:8, 11:12)] <- b
b <- b_n
W3 <- getW2(b)
fill3 <- (W3 * ind_mat[3:num_days,]) >= 0
RP3 <- rowSums(fill3 * W3 * roc[3:(num_days),]) / rowSums(abs(fill3 * W3))
RP3[is.nan(RP3)] = 0
sharpe <- mean(RP3[600:1001])/sd(RP3[600:1001])
sharpe_total <- mean(RP3)/sd(RP3)
sharpe_train <- mean(RP3[1:600])/sd(RP3[1:600])
b_alt <- b[b != 0]
W3_alt <- getW2Spe(b_alt)
head(W3[,1:10])
head(W3[,1:5])
head(W3_alt[,1:5])
getSharpe_BA(b_alt, 1000)
training_day_num <- 1000
RP3 <- rowSums(fill3[3:(training_day_num),] * W3[1:(training_day_num - 2),] * roc[3:(training_day_num),]) / rowSums(abs(fill3[3:(training_day_num),] * W3[1:(training_day_num - 2),]))
source('yu_lib2.r')
source('yu_lib2.r')
system.time({b <- bee_Algorithm(1000)})
b_n <- rep(0, 12)
b_n[c(3:4, 7:8, 11:12)] <- b
b <- b_n
W3 <- getW2(b)
fill3 <- (W3 * ind_mat[3:num_days,]) >= 0
RP3 <- rowSums(fill3 * W3 * roc[3:(num_days),]) / rowSums(abs(fill3 * W3))
RP3[is.nan(RP3)] = 0
sharpe_train <- mean(RP3[1:600])/sd(RP3[1:600])
sharpe_val <- mean(RP3[600:1001])/sd(RP3[600:1001])
sharpe_total <- mean(RP3)/sd(RP3)
b <- rep(1, 12)
W3 <- getW2(b)
fill3 <- (W3 * ind_mat[3:num_days,]) >= 0
RP3 <- rowSums(fill3 * W3 * roc[3:(num_days),]) / rowSums(abs(fill3 * W3))
RP3[is.nan(RP3)] = 0
sharpe_total <- mean(RP3)/sd(RP3)
source('yu_lib2.r')
system.time({b <- bee_Algorithm(600)})
b_n <- rep(0, 12)
b_n[c(3:4, 7:8, 11:12)] <- b
b <- b_n
b <- rep(1, 12)
W3 <- getW2(b)
fill3 <- (W3 * ind_mat[3:num_days,]) >= 0
RP3 <- rowSums(fill3 * W3 * roc[3:(num_days),]) / rowSums(abs(fill3 * W3))
RP3[is.nan(RP3)] = 0
sharpe_train <- mean(RP3[1:600])/sd(RP3[1:600])
RP3[1]
W3[1,1]
W3[1,1:5]
fill3[1, 1:5]
RP3[1]
b <- b_n
W3 <- getW2(b)
fill3 <- (W3 * ind_mat[3:num_days,]) >= 0
RP3 <- rowSums(fill3 * W3 * roc[3:(num_days),]) / rowSums(abs(fill3 * W3))
RP3[is.nan(RP3)] = 0
sharpe_train <- mean(RP3[1:600])/sd(RP3[1:600])
sharpe_val <- mean(RP3[600:1001])/sd(RP3[600:1001])
sharpe_total <- mean(RP3)/sd(RP3)
b
trade_cap_mat <- tvl_mat * so_mat
trade_cap_mat <- trade_cap_mat / matrix(rowSums(trade_cap_mat), nrow = num_days, ncol = N)
rowSums(trade_cap_mat)
mkt_roc <- rowSums(trade_cap_mat * roc)
rco <- so_mat[2:num_days,] / sc_mat[1:(num_days - 1),] - 1
mkt_rco <- rowSums(trade_cap_mat[1:(num_days - 1),] * rco)
source('yu_lib4.r')
rm(list = ls())
source('yu_lib4.r')
data <- read.table("../in_sample_data.txt", sep=",")
so_indices <- 1 + 6 * 0:99 + 1
sh_indices <- 1 + 6 * 0:99 + 2
sl_indices <- 1 + 6 * 0:99 + 3
sc_indices <- 1 + 6 * 0:99 + 4
tvl_indices <- 1 + 6 * 0:99 + 5
ind_indices <- 1 + 6 * 0:99 + 6
so_mat <- data.matrix(data[,so_indices])
sh_mat <- data.matrix(data[,sh_indices])
sl_mat <- data.matrix(data[,sl_indices])
sc_mat <- data.matrix(data[,sc_indices])
tvl_mat <- data.matrix(data[,tvl_indices])
ind_mat <- data.matrix(data[,ind_indices])
N = 100
num_days <- nrow(sc_mat)
trade_cap_mat <- tvl_mat * so_mat
trade_cap_mat <- trade_cap_mat / matrix(rowSums(trade_cap_mat), nrow = num_days, ncol = N)
roc <- sc_mat[1:num_days,] / so_mat[1:num_days,] - 1
rco <- so_mat[2:num_days,] / sc_mat[1:(num_days - 1),] - 1
rvp <- (1 / (4 * log(2))) * (log(sh_mat) - log(sl_mat))^2
mkt_roc <- rowSums(trade_cap_mat * roc)
mkt_rco <- rowSums(trade_cap_mat[1:(num_days - 1),] * rco)
avrTVL <- matrix(0, nrow = num_days - 1, ncol = N)
avrRVP <- matrix(0, nrow = num_days - 1, ncol = N)
for (t in 1: (num_days - 1)){
if (t > 200){
avrTVL[t,] <- colMeans(tvl_mat[(t - 199):t,])
avrRVP[t,] <- colMeans(rvp[(t - 199):t,])
}
else{
if (t == 1){
avrTVL[1,] <- tvl_mat[1,]
avrRVP[1,] <- rvp[1,]
}
else{
avrTVL[t,] <- colMeans(tvl_mat[1:t,])
avrRVP[t,] <- colMeans(rvp[1:t,])
}
}
}
test <- matrix(mkt_roc[1:(num_days - 1)], nrow = num_days - 1,ncol = 100)
Q41 <- (roc[1:(num_days - 1),] - test) / N
test <- matrix(mkt_rco[1:(num_days - 1)], nrow = num_days - 1,ncol = 100)
Q42 <- (rco[1:(num_days - 1),] - test) / N
Q43 <- trade_cap_mat[1:(num_days - 1),] * Q41
Q44 <- trade_cap_mat[1:(num_days - 1),] * Q42
Q45 <- Q41 * rvp[1:(num_days - 1),] / avrRVP[1:(num_days - 1),]
Q46 <- Q42 * rvp[1:(num_days - 1),] / avrRVP[1:(num_days - 1),]
training_day_num = 600
a <- bee_Algorithm(training_day_num)
W4 <- getW4(a)
fill4 <- (W4 * ind_mat[2:num_days,]) >= 0
RP4 <- rowSums(fill4 * W4 * roc[2:(num_days),]) / rowSums(abs(fill4 * W4))
RP4[is.nan(RP4)] = 0
sharpe_train <- mean(RP4[1:600])/sd(RP4[1:600])
sharpe_val <- mean(RP4[600:1001])/sd(RP4[600:1001])
sharpe_total <- mean(RP4)/sd(RP4)
a <- c(-55.95384856140999, 220.7555689602101, -13.542666594870024, -1702.3177370768233, 88.39633449814, -22.326309867310002, -69.51420352833, -69.34618014295988, -105.60742803259, 34.910781586169996, 23.23096392616, 113.6102246965299)
rm(list = ls())
source('~/quantathon/427H1p0T66/Yu/p2.R', echo=TRUE)
rm(list = ls())
source('~/quantathon/427H1p0T66/Yu/p2.R', echo=TRUE)
rm(list = ls())
source('~/quantathon/427H1p0T66/Yu/p3.R', echo=TRUE)
source('~/quantathon/427H1p0T66/Yu/p3.R', echo=TRUE)
rm(list = ls())
source('~/quantathon/427H1p0T66/Yu/p1_yu.r', echo=TRUE)
rm(list = ls())
source('~/quantathon/427H1p0T66/Yu/p4.R', echo=TRUE)
b <- rep(1, 12)
W3 <- getW2(b)
fill3 <- (W3 * ind_mat[3:num_days,]) >= 0
RP3 <- rowSums(fill3 * W3 * roc[3:(num_days),]) / rowSums(abs(fill3 * W3))
RP3[is.nan(RP3)] = 0
rm(list = ls())
source('yu_lib2.r')
data <- read.table("../in_sample_data.txt", sep=",")
so_indices <- 1 + 6 * 0:99 + 1
sh_indices <- 1 + 6 * 0:99 + 2
sl_indices <- 1 + 6 * 0:99 + 3
sc_indices <- 1 + 6 * 0:99 + 4
tvl_indices <- 1 + 6 * 0:99 + 5
ind_indices <- 1 + 6 * 0:99 + 6
so_mat <- data.matrix(data[,so_indices])
sh_mat <- data.matrix(data[,sh_indices])
sl_mat <- data.matrix(data[,sl_indices])
sc_mat <- data.matrix(data[,sc_indices])
tvl_mat <- data.matrix(data[,tvl_indices])
ind_mat <- data.matrix(data[,ind_indices])
N = 100
num_days <- nrow(sc_mat)
rco <- so_mat[2:num_days,] / sc_mat[1:(num_days - 1),] - 1
roc <- sc_mat[1:num_days,] / so_mat[1:num_days,] - 1
roo <- so_mat[2:num_days,] / so_mat[1:(num_days - 1),] - 1
rcc <- sc_mat[2:num_days,] / sc_mat[1:(num_days - 1),] - 1
rvp <- (1 / (4 * log(2))) * (log(sh_mat) - log(sl_mat))^2
avrRCO <- rowMeans(rco)
avrROC <- rowMeans(roc)
avrROO <- rowMeans(roo)
avrRCC <- rowMeans(rcc)
avrTVL <- matrix(0, nrow = num_days - 1, ncol = N)
avrRVP <- matrix(0, nrow = num_days - 1, ncol = N)
for (t in 1: (num_days - 1)){
if (t > 200){
avrTVL[t,] <- colMeans(tvl_mat[(t - 199):t,])
avrRVP[t,] <- colMeans(rvp[(t - 199):t,])
}
else{
if (t == 1){
avrTVL[1,] <- tvl_mat[1,]
avrRVP[1,] <- rvp[1,]
}
else{
avrTVL[t,] <- colMeans(tvl_mat[1:t,])
avrRVP[t,] <- colMeans(rvp[1:t,])
}
}
}
test <- matrix(avrRCC[1:(num_days - 2)], nrow = num_days - 2,ncol = 100)
Q1 <- (rcc[1:(num_days - 2),] - test) / N
test <- matrix(avrROO[2:(num_days - 1)], nrow = num_days - 2,ncol = 100)
Q2 <- (roo[2:(num_days - 1),] - test) / N
test <- matrix(avrROC[2:(num_days - 1)], nrow = num_days - 2,ncol = 100)
Q3 <- (roc[2:(num_days - 1),] - test) / N
test <- matrix(avrRCO[2:(num_days - 1)], nrow = num_days - 2,ncol = 100)
Q4 <- (rco[2:(num_days - 1),] - test) / N
Q5 <- Q1 * tvl_mat[2:(num_days - 1),] / avrTVL[2:(num_days - 1),]
Q6 <- Q2 * tvl_mat[2:(num_days - 1),] / avrTVL[2:(num_days - 1),]
Q7 <- Q3 * tvl_mat[2:(num_days - 1),] / avrTVL[2:(num_days - 1),]
Q8 <- Q4 * tvl_mat[2:(num_days - 1),] / avrTVL[2:(num_days - 1),]
Q9 <- Q1 * rvp[2:(num_days - 1),] / avrRVP[2:(num_days - 1),]
Q10 <- Q2 * rvp[2:(num_days - 1),] / avrRVP[2:(num_days - 1),]
Q11 <- Q3 * rvp[2:(num_days - 1),] / avrRVP[2:(num_days - 1),]
Q12 <- Q4 * rvp[2:(num_days - 1),] / avrRVP[2:(num_days - 1),]
b <- rep(1, 12)
W3 <- getW2(b)
fill3 <- (W3 * ind_mat[3:num_days,]) >= 0
RP3 <- rowSums(fill3 * W3 * roc[3:(num_days),]) / rowSums(abs(fill3 * W3))
RP3[is.nan(RP3)] = 0
sharpe_train <- mean(RP3[1:600])/sd(RP3[1:600])
sharpe_val <- mean(RP3[600:1001])/sd(RP3[600:1001])
sharpe_total <- mean(RP3)/sd(RP3)
install.packages('moments')
library('moments')
rm(list = ls())
source('~/quantathon/427H1p0T66/Yu/p1_yu.r', echo=TRUE)
source('~/quantathon/427H1p0T66/Yu/p1_yu.r', echo=TRUE)
rm(list = ls())
source('~/quantathon/427H1p0T66/Yu/p2.R', echo=TRUE)
source('~/quantathon/427H1p0T66/Yu/p2.R', echo=TRUE)
rm(list = ls())
source('~/quantathon/427H1p0T66/Yu/p3.R', echo=TRUE)
rm(list = ls())
source('~/quantathon/427H1p0T66/Yu/p4.R', echo=TRUE)
pdf_out(RP4)
source('yu_lib4.r')
pdf_out(RP4)
source('yu_lib4.r')
pdf_out(RP4)
source('yu_lib4.r')
pdf_out(RP4)
source('yu_lib4.r')
pdf_out(RP4)
